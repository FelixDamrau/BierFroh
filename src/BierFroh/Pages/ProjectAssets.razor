@page "/projectassets"

@using BierFroh.Components
@using BierFroh.Model
@using BierFroh.Modules.DependencyGraph
@using Blazor.Diagrams
@using Blazor.Diagrams.Core
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Components

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Project Assets Graph</MudText>
    <InputFile id="fileInput" OnChange="OnInputFileChange" hidden accept=".json" />
    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.UploadFile" for="fileInput">assets.json laden</MudButton>

    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-16 ma-2">
                <div style="width:70vw; height: 50vh">
                    <CascadingValue Value="diagram">
                        <DiagramCanvas></DiagramCanvas>
                    </CascadingValue>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private const long maxFileSize = 1024 * 1024 * 11; //11MB
    private Diagram? diagram;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var selectedFile = e.GetMultipleFiles().Single();
        using var stream = selectedFile.OpenReadStream(maxFileSize);
        using var reader = new StreamReader(stream);
        var json = await reader.ReadToEndAsync();
        var projectAssets = ProjectAssetsDeserializer.Deserialize(json);
        var graph = new DependencyGraph().GetDirectedGraph(projectAssets);

        diagram.Nodes.Add(new Dependency(new Point(10, 10)));
        var x = 10;
        foreach (var dep in graph.Vertices.Skip(1))
        {
            var nodeModel = new Dependency(new Point(x += 30, 30));
            nodeModel.Title = dep.Value.Name;
            diagram.Nodes.Add(nodeModel);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        diagram = new Diagram();
        diagram.RegisterModelComponent<Dependency, DependencyNode>();
    }
}
