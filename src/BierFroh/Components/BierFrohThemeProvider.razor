@using BierFroh.State;

@inject AppStateProvider appStateProvider;

<MudThemeProvider Theme="currentTheme" />

<MudTooltip Text="@tooltipCurrent">
    <MudIconButton Icon="@iconCurrent" OnClick="ChangeDarkMode" />
</MudTooltip>

@code{
    private const string tooltipToLightMode = "See the light";
    private const string tooltipToDarkMode = "Be in the dark";
    private static readonly string iconDarkMode = Icons.Material.Filled.Brightness4;
    private static readonly string iconLightMode = Icons.Material.Filled.Brightness5;
    private string iconCurrent = iconLightMode;
    private string tooltipCurrent = tooltipToLightMode;
    private MudTheme currentTheme = new MudTheme();
    private MudTheme defaultTheme = new MudTheme()
    {
        Palette = new PaletteLight()
        {
            Black = "#272c34"
        }
    };
    private MudTheme darkTheme = new MudTheme()
    {
        Palette = new PaletteDark()
        {
            Black = "#27272f",
            Background = "#32333d",
            BackgroundGrey = "#27272f",
            Surface = "#373740",
            DrawerBackground = "#27272f",
            DrawerText = "rgba(255,255,255, 0.50)",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#27272f",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "rgba(255,255,255, 0.70)",
            TextSecondary = "rgba(255,255,255, 0.50)",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
            Divider = "rgba(255,255,255, 0.12)",
            DividerLight = "rgba(255,255,255, 0.06)",
            TableLines = "rgba(255,255,255, 0.12)",
            LinesDefault = "rgba(255,255,255, 0.12)",
            LinesInputs = "rgba(255,255,255, 0.3)",
            TextDisabled = "rgba(255,255,255, 0.2)"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await InitDarkMode();
        await base.OnInitializedAsync();
    }

    private async Task ChangeDarkMode()
    {
        var appState = await appStateProvider.Get();
        var isDarkMode = !appState.RootState.IsDarkMode;
        ApplyDarkMode(appState.RootState, isDarkMode);
        await Save(appState.RootState, isDarkMode);
    }

    private async Task InitDarkMode()
    {
        var appState = await appStateProvider.Get();
        var isDarkMode = appState.RootState.IsDarkMode;
        ApplyDarkMode(appState.RootState, isDarkMode);
    }

    private void ApplyDarkMode(RootState rootState, bool idDarkMode)
    {
        iconCurrent = GetIcon(idDarkMode);
        tooltipCurrent = GetTooltip(idDarkMode);
        currentTheme = idDarkMode ? darkTheme : defaultTheme;
    }

    private async Task Save(RootState rootState, bool isDarkMode)
    {
        if (rootState.IsDarkMode != isDarkMode)
            await appStateProvider.Update(rootState with { IsDarkMode = isDarkMode });
    }

    private string GetIcon(bool isDarkMode) => isDarkMode ? iconLightMode : iconDarkMode;
    private string GetTooltip(bool isDarkMode) => isDarkMode ? tooltipToLightMode : tooltipToDarkMode;
}